<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="spring.model.mapper.MemberMapper">
	 
<insert id="create" parameterType="MemberDTO">
	insert into member(
	id,passwd,name,postcode,address
	,detailaddress,phone,email,birth,point,grade
	)
	values(
	#{id},#{passwd},#{name},#{postcode},#{address}
	,#{detailaddress},#{phone},#{email},#{birth},0,'H'
	)
</insert>


 
<select id="duplicateId" parameterType="String" resultType="int">
		select count(id) from member
		where id = #{id}
</select>

<select id="loginCheck" parameterType="Map" resultType="int">
	select count(*) from member
	where id= #{id} and passwd = #{passwd}
</select>

<select id="getGrade" parameterType="String" resultType="String">
	select grade from member
	where id = #{id} 
</select>

<select id="read" parameterType="String" resultType="MemberDTO">
select id,name,postcode,address,detailaddress,
phone,email,birth,point,grade,
from member
where id = #{id}
</select>

<select id="findpw" parameterType="Map" resultType="String">
select passwd from member
where name = #{name} and id = #{id}
</select>

<select id="findid" parameterType="Map" resultType="String">
select id from member
where name = #{name} and email = #{email}
</select>

<update id="updatePasswd" parameterType="Map">
update member
set passwd = #{passwd}
where id = #{id}
</update>

<update id="update" parameterType="MemberDTO">
update member
set phone = #{phone}, email = #{email}, postcode = #{postcode} , address = #{address}, 
detailaddress = #{detailaddress}, birth=#{birth}
where id = #{id}

</update>

<delete id="delete" parameterType="String">
	delete from member
	where id = #{id}
</delete>

<select id="list" parameterType="Map" resultType="MemberDTO">
		select id, name, postcode, address, detailaddress, 
		phone, email, birth, point, r
		from(
			select id, name, postcode, address, detailaddress, 
			phone, email, birth, point, 
			rownum r
			from(
				select id, name, postcode, address, detailaddress
				from member
		<where>
			<choose>
				<when test="col=='name'">
					mname like '%'||#{word}||'%'
				</when>
				<when test="col=='id'">
					id like '%'||#{word}||'%'
				</when>
				<when test="col=='email'">
					email like '%'||#{word}||'%'
				</when>
			</choose>
		</where>

		ORDER BY id ASC
		)
		)
<![CDATA[
WHERE r >= #{sno} AND r <= #{eno}
]]>
</select>

<select id="total" parameterType="Map" resultType="int">
		select count(*) from member
		<where>
			<choose>
				<when test="col=='name'">
					name like '%'||#{word}||'%'
				</when>
				<when test="col=='id'">
					id like '%'||#{word}||'%'
				</when>
				<when test="col=='email'">
					email like '%'||#{word}||'%'
				</when>
			</choose>
		</where>
</select>



</mapper>